@use 'sass:map';

@use 'config' as *;


@mixin setVarsPars($key, $val, $par-key: '--')
{
    $delimiter: '-';
    @if $par-key == '--'
    {
        $delimiter: '';
    }

    @if type-of($val) != map
    { 
        #{$par-key}#{$delimiter}#{$key}: #{$val};
    }

    @else
    {
        $_val_: map.get($val, '_val_');
        $_ext_: map.get($val, '_ext_');

        @if $_val_ != null
        {
            $result: $_val_;
            
            @if $_ext_ != null {$result: '#{$result}#{$_ext_}'}

            #{$par-key}#{$delimiter}#{$key}: #{$result}
        }
        @else
        {
            @each $new-key, $new-val in $val
            {
                @include setVarsPars($new-key, $new-val, '#{$par-key}#{$delimiter}#{$key}');
            }
        } 
    } 
}

@mixin setVars($from)
{ 
    @each $key, $val in $from
    {
        @include setVarsPars($key, $val);
    } 
};

@mixin breakpoint($bp, $is_mobile:false)
{
    @if($is_mobile)
    {
        @media(min-width: map-get($bps, $bp))
        {
            @content;
        }
    }
    @else
    {
        @media(max-width: map-get($bps, $bp))
        {
            @content;
        }
    }
}

@mixin isMobile
{
    @media only screen and (hover: none) and (pointer: coarse)
    {
        @content;
    }
}

@mixin transition($target: null)
{
    @if not $target
    {
        transition: var(--transition-main-time) var(--transition-main-type);
    }
    @else
    {
        $value: null;
        @each $i in $target
        {
            $value: $value, $i var(--transition-main-time) var(--transition-main-type);
        }
        transition: $value;
    }
}
